tosca_definitions_version: tosca_simple_unfurl_1_0_0
metadata:
  template_name: unfurl_types
  template_author: unfurl
  template_version: 1.0.0
node_types:
  unfurl.nodes.Installer:
    derived_from: tosca.nodes.Root
    capabilities:
      install:
        type: unfurl.capabilities.Installer
    properties:
      provides:
        type: list
        required: false
      implements:
        type: list
        default:
          - unfurl.interfaces.install
      operations:
        type: map
        description: >
         Value is are config spec properties (see "configurationSpec" in the JSON schema for the manifest).
         Keys that match <interface.operation> or <action> will be instantiated
         values in "shared" will be merged into the other configurations
         and "default" will be used if the operation isn't present.

  unfurl.nodes.Installation:
    derived_from: tosca.nodes.Root

    requirements:
      - install:
          capability: unfurl.capabilities.Installer
          node: unfurl.nodes.Installer
          relationship: unfurl.relationships.InstalledBy
          occurrences: [0, 1] # it isn't necessarily required
    interfaces:
      Install:
        type: unfurl.interfaces.Install

  unfurl.nodes.Default:
    derived_from: unfurl.nodes.Installation
    description: "Used if pre-existing instances are declared with no TOSCA template"

  unfurl.nodes.K8sCluster:
    derived_from: tosca.nodes.Root
    properties:
      connection:
        type: map
        required: false
       # any K8S_AUTH_* in https://docs.ansible.com/ansible/latest/modules/k8s_module.html#k8s-module
       # or if not specified checks in cluster KUBERNETES_SERVICE_HOST, KUBERNETES_SERVICE_PORT and /var/run/secrets/kubernetes.io/serviceaccount/
       # see also https://www.terraform.io/docs/providers/kubernetes/index.html
    capabilities:
      host:
        type: tosca.capabilities.Container
        valid_source_types: [unfurl.nodes.K8sRawResource, unfurl.nodes.K8sNamespace]
    attributes:
      apiServer:
        description: URL to the cluster's api server
        type: string
        metadata:
          # mark this is as immutable to make sure the connection is pointing at the same cluster in subsequent runs
         immutable: true
    interfaces:
      Standard:
        inputs:
          connection: {get_property: ['SELF', 'connection']}
        configure:
          unfurl.configurators.k8s.ClusterConfigurator
        delete:
          unfurl.configurators.k8s.ClusterConfigurator

  # unfurl.nodes.DockerImage:
  #   derived_from: tosca.nodes.Root
  #   # usage: ::image::repoDigest::0
  #   properties:
  #     name:
  #       type: string
  #     tag:
  #       type: string
  #       default: 'latest'
  #   attributes:
  #      repoDigests:
  #       type: list
  #   interfaces:
  #     Standard:
  #       create:
  #         # need to check hasChanged() if tag isn't a digest
  #         unfurl.configurators.k8s.ImageConfigurator
  #       configure:
  #         unfurl.configurators.k8s.ImageConfigurator

  unfurl.nodes.K8sRawResource:
    derived_from: tosca.nodes.Root
    requirements:
      - host:
          node: unfurl.nodes.K8sCluster
          relationship: tosca.relationships.HostedOn
    properties:
     definition:
       type: any
       required: false
    attributes:
      apiResource:
       type: map
       required: false
      name:
       type: string
       default:
         eval: .name
    interfaces:
      Standard:
        inputs:
          connection: {get_property: ['HOST', 'connection']}
        configure:
          unfurl.configurators.k8s.ResourceConfigurator
        delete:
          unfurl.configurators.k8s.ResourceConfigurator

  unfurl.nodes.K8sNamespace:
    derived_from: unfurl.nodes.K8sRawResource
    capabilities:
      host:
        type: tosca.capabilities.Container
        valid_source_types: [unfurl.nodes.K8sResource]
    properties:
      name:
        type: string
        default: default
        metadata:
          # namespaces can't be renamed
          immutable: true

  unfurl.nodes.K8sResource:
    derived_from: unfurl.nodes.K8sRawResource
    requirements:
      - host:
          node: unfurl.nodes.K8sNamespace
          relationship: tosca.relationships.HostedOn
    attributes:
      namespace:
        type: string
        default: {get_property: [HOST, name]}

  unfurl.nodes.k8sSecretResource:
    derived_from: unfurl.nodes.K8sResource

capability_types:
  unfurl.capabilities.Installer:
   derived_from: tosca.capabilities.Root

  unfurl.capabilities.Endpoint.Ansible:
    derived_from: tosca.capabilities.Endpoint.Admin
    description: Capability to connect to Ansible
    properties:
      connection:
        description: The connection type (sets "ansible_connection")
        type: string
        default: local
      port:
        type: tosca:PortDef
        description: sets "ansible_port"
        required: false
      host:
        type: string
        description: sets "ansible_host"
        required: false
      credential:
        description: Its "user" property sets "ansible_user", add properties like "ssh_private_key_file" to "keys"
        type: tosca.datatypes.Credential
        required: false
        metadata:
            sensitive: true
      hostvars:
        type: map
        required: false
        description: >
          Passed to ansible as host vars
          See https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.html#connecting-to-hosts-behavioral-inventory-parameters

  unfurl.capabilities.Endpoint.SSH:
    derived_from: unfurl.capabilities.Endpoint.Ansible
    description: Capability to connect to the host via SSH
    properties:
      protocol:
        type: string
        value: ssh
        default: ssh
      connection:
        type: string
        default: ssh
      port:
        type: tosca:PortDef
        default: 22

relationship_types:
  unfurl.relationships.InstalledBy:
   derived_from: tosca.relationships.Root
   valid_target_types: [ unfurl.capabilities.Installer ]
   interfaces:
     Install:
       type: unfurl.interfaces.Install

interface_types:
  unfurl.interfaces.Install:
    derived_from: tosca.interfaces.Root
    check:
      description: Checks and sets the status and attributes of SELF
    discover:
      description: Discovers current state of the current instance and (possibly) related instances, updates the spec as needed.

group_types:
  unfurl.groups.AnsibleInventoryGroup:
    derived_from: tosca.groups.Root
    description: Use this to place hosts in Ansible inventory groups
    properties:
      hostvars:
        description: Ansible hostvars for members of this group
        type: map
        default: {}
    members: [ tosca.nodes.Compute, unfurl.groups.ansibleInventoryGroup]
