tosca_definitions_version: tosca_simple_unfurl_1_0_0
node_types:
  unfurl.nodes.Application.Docker:
    derived_from: tosca.nodes.Container.Application.Docker
    properties:
      name:
        type: string
        description: The name of the container
        default:
          eval: ".name"
    interfaces:
      Standard:
        operations:
          configure:
            description: Create or update a container
            implementation:
              className: unfurl.configurators.ansible.AnsibleConfigurator
            outputs:
              docker_container:
            inputs:
              playbook:
                eval:
                  template: |
                    #jinja2: variable_start_string: '<%', variable_end_string: '%>'
                    {% filter from_yaml %}
                    - set_fact:
                        image: "{{ '.artifacts::image' | eval }}"
                        image_path: "{{ {'get_artifact': ['SELF', 'image']} | eval }}"
                    - set_fact:
                        registry: "{{ image.repository }}"
                    - docker_login:
                         # https://docs.ansible.com/ansible/latest/modules/docker_login_module.html#docker-login-module
                         # https://github.com/ansible/ansible/blob/stable-2.8/lib/ansible/modules/cloud/docker/docker_login.py
                         username: "{{ registry.credential.user }}"
                         password: "{{ registry.credential.token }}"
                         registry_url: "{{ registry.url }}"
                      when: registry and registry.credential
                    - docker_container:
                        # https://docs.ansible.com/ansible/latest/modules/docker_container_module.html#docker-container-module
                        # https://github.com/ansible/ansible/blob/stable-2.8/lib/ansible/modules/cloud/docker/docker_container.py
                        name: "{{ 'name' | eval }}" # required
                        state: started
                        image: "{{ image_path }}" # Repository path and tag
                        # XXX :
                        # api_version: max(set(capabilities.versions) | set(host::versions))
                        # published_ports: {{ if(SELF.publish_all, 'all', SELF.publish_ports }}
                        # exposed_ports: {{ SELF.exposed_ports }}
                        # volumes: "{{ '.::volumes' | ref }}"
                        # env: {{ env }}?
                        <<: <% inputs.configuration | default({}) | mapValue | to_json %>
                    {% endfilter %}
          start:
            implementation:
              className: unfurl.configurators.ansible.AnsibleConfigurator
            inputs:
              playbook:
                - docker_container:
                    name:
                      eval: name
                    state: started
          stop:
            implementation:
              className: unfurl.configurators.ansible.AnsibleConfigurator
            inputs:
              playbook:
                - docker_container:
                    name:
                      eval: name
                    state: stopped
          delete:
            implementation:
              className: unfurl.configurators.ansible.AnsibleConfigurator
            inputs:
              playbook:
                - docker_container:
                    name:
                      eval: name
                    state: absent
