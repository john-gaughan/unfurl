"""
This module defines the core model and implements the runtime operations of the model.

The state of the system is represented as a collection of Resources
Each resource have a status; inert attributes that describe its state;
 and a list of configurations that manage its state.

Each configurations has a status, list of dependencies and an associated spec
Two kinds of dependencies:
 1. live attributes that the configuration's parameters depend on
 2. other configurations and resources it relies on to function properly and so it's status depends on them

A Job is generated by comparing a list of specs with the last known state of the system
Job runs tasks, each of which has a configuration spec that is executed on the running system
Each task is responsible for running one configuration and records its modifications to the system's state

Resource
Configurator
Configuration
ConfigurationSpec

Task
Job
JobOptions
Runner
"""

import six
import collections
import datetime
import sys
import types
from itertools import chain
from ruamel.yaml.comments import CommentedMap
from enum import IntEnum
from .util import (GitErOpError, GitErOpTaskError, lookupClass, AutoRegisterClass,
                        toEnum, diffDicts, validateSchema, mergeDicts, intersectDict)
from .eval import Ref, mapValue, serializeValue

# question: if a configuration failed to apply should that affect the status of the configuration?
# OTOH the previous version of the configuration status is still in effect
# But if the configuration did fail could mean error at global level
# treat failed as a separate dependent configuration that can contribute to aggregate status
# and participate in resource graph
# XXX2 add upgrade required field?
# XXX2 for dependencies checking add a revision field that increments everytime configuration changes?

# XXX2 doc: notpresent is a positive assertion of non-existence while notapplied just indicates non-liveness
# notapplied is therefore the default initial state
S = Status = IntEnum("Status", "ok degraded error pending notapplied notpresent", module=__name__)

# ignore may must
Priority = IntEnum("Priority", "ignore optional required", module=__name__)

# omit discover exist
A = Action = IntEnum("Action", "discover instantiate revert", module=__name__)

class Defaults(object):
  shouldRun = Priority.optional
  canRun = True
  intent = Action.instantiate

# for configuration: same as last task run, but also responsible for its adopted child resources?
# status refers to current state of system not what happened when object was last applied
# semantics of priority / shouldRun / skip
# semantics of notapplied

class Operational(object):
  """
  This is an abstract base class for Jobs, Resources, and Configurations all have a Status associated with them
  and all use the same algorithm to compute their status from their dependent resouces, tasks, and configurations

  # operational: boolean: ok or degraded
  # status: ok, degraded, error, notpresent
  # degraded: non-fatal errors or didn't provide required attributes or if couldnt upgrade
  """

  # XXX2 add repairable, messages?

  # core properties to override
  @property
  def priority(self):
    return Defaults.shouldRun

  @property
  def computedStatus(self):
    return Status.notapplied

  def getOperationalDependencies(self):
    return ()

  @property
  def manualOverideStatus(self):
    return None

  # derived properties:
  @property
  def operational(self):
    return self.status == Status.ok or self.status == Status.degraded

  @property
  def active(self):
    return self.status <= Status.error

  @property
  def status(self):
    if self.manualOverideStatus is not None:
      status = self.manualOverideStatus
      if status >= Status.error:
        return status
    else:
      status = self.computedStatus
      if status == Status.error or status == Status.notpresent:
        return status

    return self.aggregateStatus(self.getOperationalDependencies(), status)

  @property
  def required(self):
    return self.priority == Priority.required

  @staticmethod
  def aggregateStatus(statuses, defaultStatus = Status.ok):
    # error if a configuration is required and not operational
    # error if a non-configuration managed child resource is required and not operational
    # degraded if non-required configurations and resources are not operational
    #          or required configurations and resources are degraded
    # ok otherwise

    #any required is pending then aggregate is pending
    #any other are pending only set pending if aggregate is ok
    aggregate = defaultStatus
    for status in statuses:
      assert isinstance(status, Operational), status
      if status.priority == Priority.ignore:
        continue
      elif status.required:
        if not status.operational:
          aggregate = Status.error
          break
        elif status.status == Status.degraded:
          aggregate = Status.degraded
      elif status.status == Status.pending and aggregate <= Status.pending:
         aggregate = Status.pending
      elif not status.operational:
          aggregate = Status.degraded
      elif aggregate == Status.notapplied:
          aggregate = Status.ok
    return aggregate

class OperationalInstance(Operational):
  def __init__(self, status=None, priority=None, manualOveride=None):
    self._computedStatus = toEnum(Status, status)
    self._manualOverideStatus = toEnum(Status, manualOveride)
    self._priority = toEnum(Priority, priority)
    self.dependencies = []
    #self.repairable = False # XXX2
    #self.messages = [] # XXX2

  def getOperationalDependencies(self):
    return self.dependencies

  def computedStatus():
    doc = "The computedStatus property."
    def fget(self):
      return self._computedStatus
    def fset(self, value):
      self._computedStatus = value
    def fdel(self):
      del self._computedStatus
    return locals()
  computedStatus = property(**computedStatus())

  def manualOverideStatus():
    doc = "The manualOverideStatus property."
    def fget(self):
      return self._manualOverideStatus
    def fset(self, value):
      self._manualOverideStatus = value
    def fdel(self):
      del self._manualOverideStatus
    return locals()
  manualOverideStatus = property(**manualOverideStatus())

  def priority():
    doc = "The priority property."
    def fget(self):
      return self._priority
    def fset(self, value):
      self._priority = value
    def fdel(self):
      del self._priority
    return locals()
  priority = property(**priority())

class Resource(OperationalInstance):
  def __init__(self, name='', attributes=None, parent=None, configurations=None,
        children=None, spec=None, status=None, priority=None, manualOveride=None):
    OperationalInstance.__init__(self, status, priority, manualOveride)
    self.name = name # XXX2 guarantee name uniqueness
    self._attributes = attributes or {}
    self.configurations = CommentedMap( (c.name, c) for c in (configurations or []) )
    # XXX2 replace with activeConfigurations vs. inactiveConfigurations
    # affirmatively absent configurations -- i.e. failed to apply or explicitly not present
    # we don't want any notapplied or notpresent in configurations

    # excludedConfigurations are configurations intended as notpresent
    # or an update to a configuration that failed to apply
    self.excludedConfigurations = {}
    self.container = parent
    if parent:
      parent.resources.append(self)
    self.resources = children or []
    self.spec = spec or {}
    self.attributeManager = None
    self._computedStatus = Status.notapplied

  def computedStatus():
    doc = "The computedStatus property."
    def fget(self):
      return self._computedStatus
    def fset(self, value):
      if self.root.attributeManager:
        self.root.attributeManager.setStatus(self, value)
      self._computedStatus = value
    def fdel(self):
      del self._computedStatus
    return locals()
  computedStatus = property(**computedStatus())

  @property
  def named(self):
    return dict((r.name, r) for r in chain([self],self.resources))

  @property
  def attributes(self):
    if not self.root.attributeManager:
      return self._attributes
    # returned registered attribute or create a new one
    # attribute class getter resolves references
    return self.root.attributeManager.getAttributes(self)

  def _getProp(self, name):
    if name == '.':
      return self
    elif name == '..':
      return self.container
    name = name[1:]
    # XXX propmap
    return getattr(self, name)

  def __reflookup__(self, key):
    if not key:
      raise KeyError(key)
    if key[0] == '.':
      return self._getProp(key)

    value = self._attributes[key]
    return Ref.resolveOneIfRef(value, self)

  def getOperationalDependencies(self):
    return self.configurations.values()

  def getSelfAndDescendents(self):
    "Recursive descendent including self"
    yield self
    for r in self.resources:
      for descendent in r.getSelfAndDescendents():
        yield descendent

  @property
  def descendents(self):
    return list(self.getSelfAndDescendents())

  def findResource(self, resourceid):
    if self.name == resourceid:
      return self
    for r in self.resources:
      if r.name == resourceid:
        return r
    return None

  def addResource(self, resource):
    assert resource.container == self
    self.resources.append(resource)

  def yieldParents(self):
    "yield self and ancestors"
    resource = self
    while resource:
      yield resource
      resource = resource.container

  @property
  def ancestors(self):
    return list(self.yieldParents())

  @property
  def root(self):
    return self.ancestors[-1]

  def asRef(self):
    return {"ref": "[name=%s]"% self.name}

  def setConfiguration(self, configuration):
    if configuration.status == Status.notpresent and configuration.intent == Action.revert:
      self.configurations.pop(configuration.name, None)
      self.excludedConfigurations[configuration.name] = configuration
    else:
      self.configurations[configuration.name] = configuration

  def getAllConfigurationsDeep(self):
    for resource in self.getSelfAndDescendents():
      for config in resource.allConfigurations:
        yield config

  @property
  def allConfigurations(self):
    return chain(self.configurations.values(), self.excludedConfigurations.values())

@six.add_metaclass(AutoRegisterClass)
class Configurator(object):

  def __init__(self, configurationSpec):
    self.configurationSpec = configurationSpec

  def run(self, task):
    yield None

  def dryRun(self, task):
    yield None

  def canRun(self, task):
    """
    Does this configurator support the requested action and parameters
    given the current state of the resource?
    (e.g. can we upgrade from the previous configuration?)
    """
    return Defaults.canRun

  def shouldRun(self, task):
    """Does this configuration need to be run?"""
    return task.newConfiguration.configurationSpec.shouldRun(task.newConfiguration)

  def checkConfigurationStatus(self, task):
    """Is this configuration still valid?"""
    # XXX2
    # should be called during when checking dependencies
    return Status.ok

# XXX3 versioning:
# configurator api version (encoded in api namespace): semantics of the interface giterop uses
# configurator version: breaking change if interpretation of configuration parameters change
# configuration spec version: encompasses installed version -- what is installed

class ConfigurationSpec(object):
  def __init__(self, name=None, target=None, className=None, majorVersion=None, minorVersion='',
      intent=Defaults.intent, lastAttempt=None,
      parameters=None, parameterSchema=None, requires=None, provides=None):
    assert name and target and className and majorVersion is not None, "missing required arguments"
    self.name = name
    self.target = target # name of owner resource
    self.className = className
    self.majorVersion = majorVersion
    self.minorVersion = minorVersion
    self.intent = intent
    self.lastAttempt = lastAttempt
    self.parameters = parameters or {}
    self.parameterSchema = parameterSchema or {}
    self.requires = requires
    self.provides = provides

  def validateParameters(self, parameters):
    return validateSchema(serializeValue(parameters), self.parameterSchema)

  def findMissingRequirements(self, resource):
    if not self.requires:
      return []
    expanded = serializeValue(resource.attributes)
    return validateSchema(expanded, self.requires)

  def findMissingProvided(self, resource):
    if not self.provides:
      return []
    expanded = serializeValue(resource.attributes)
    return validateSchema(expanded, self.provides)

  def create(self):
    return lookupClass(self.className)(self)

  def canRun(self, configuration):
    results = self.findMissingRequirements(configuration.resource)
    return not results

  # XXX2 evaluate priority (resource too??)
  def shouldRun(self, configuration):
    return Defaults.shouldRun

  def resolveParameters(self, configuration):
    return mapValue(self.parameters, configuration.resource)

  def getPostConditions(self):
    return {}

  def copy(self, **mods):
    args = self.__dict__.copy()
    args.update(mods)
    return ConfigurationSpec(**args)

  def __eq__(self, other):
    if not isinstance(other, ConfigurationSpec):
      return False
    return (self.name == other.name and self.target == other.target and self.className == other.className
      and self.majorVersion == other.majorVersion and self.minorVersion == other.minorVersion
      and self.intent == other.intent)

class ResourceChanges(collections.OrderedDict):
  statusIndex = 0
  specIndex = 1
  attributesIndex = 2

  def __init__(self, changes=None):
    super(ResourceChanges, self).__init__()
    if not changes:
      return
    for k, change in changes.items():
      self[k] = [
        change.pop('.status', None),
        change.pop('.spec', None),
        change
      ]

  def sync(self, resource):
    """ Update self to only include changes that are still live"""
    root = resource.root
    for k, v in list(self.items()):
      current = root.findResource(k)
      if current:
        attributes = v[self.attributesIndex]
        if attributes:
          v[self.attributesIndex] = intersectDict(attributes, current._attributes)
        if v[self.statusIndex] != current._computedStatus:
          v[self.statusIndex] = None
      else:
        del self[k]

  def addChanges(self, changes):
    for name, change in changes.items():
      old = self.get(name)
      if old:
        old[self.attributesIndex] = mergeDicts(old[self.attributesIndex], change)
      else:
        self[name] = [None, None, change]

  def addStatuses(self, changes):
    for name, change in changes.items():
      old = self.get(name)
      if old:
        old[self.statusIndex] = change
      else:
        self[name] = [change, None, {}]

  def addResources(self, resources):
    for resource in resources:
      self[resource.name] = [resource._computedStatus, resource.spec, resource._attributes]

  def update(self, changes, statuses, newResources, resource):
    self.addResources(newResources)
    self.addChanges(changes)
    self.addStatuses(statuses)
    if resource:
      self.sync(resource)

class Configuration(OperationalInstance):
  def __init__(self, spec, resource, status=Status.notapplied, dependencies=None):
    super(Configuration, self).__init__(status)
    self.configurationSpec = spec
    assert resource and spec and resource.name == spec.target
    self.resource = resource
    self.dependencies = dependencies or {}
    self.parameters = None
    self.resourceChanges = ResourceChanges()

  def priority():
    doc = "The priority property."
    def fget(self):
      if self._priority is None:
        return self.configurationSpec.shouldRun(self)
      else:
        return self._priority
    def fset(self, value):
      self._priority = value
    def fdel(self):
      del self._priority
    return locals()
  priority = property(**priority())

  def getOperationalDependencies(self):
    # XXX1 requires should be part of dependencies
    conditions = chain(self.dependencies.values(), self.configurationSpec.getPostConditions().values())
    for conditionPredicate in conditions:
      yield conditionPredicate(self)

  @property
  def name(self):
    return self.configurationSpec.name

  @property
  def intent(self):
    return self.configurationSpec.intent

  def refreshParameters(self):
    self.parameters = self.configurationSpec.resolveParameters(self)
    return self.parameters

  def hasParametersChanged(self):
    return self.parameters is not None and self.configurationSpec.resolveParameters(self) != self.parameters

  def findMissingRequirements(self):
    return self.configurationSpec.findMissingRequirements(self.resource)

  def findMissingProvided(self):
    return self.configurationSpec.findMissingProvided(self.resource)

  # XXX2
  # @property
  # def outdated(self):
  #   if self._outdated:
  #     return True
  #   for config in self.dependencies:
  #     if config.outdated:
  #       return True
  #   return False

  #XXX2 like outdated
  #@property
  #def obsolete(self):

class TaskRequest(object):
  def __init__(self, configSpec, persist):
    self.configSpec = configSpec
    self.persist = persist

class JobRequest(object):
  def __init__(self, resource):
    self.resource = resource

class TaskView(object):
  """
  The interface presented to configurators.
  """
  def __init__(self, manifest, currentConfiguration):
    self.manifest = manifest
    self.currentConfiguration = currentConfiguration
    self.messages = []
    self.addedResources = []

  def addMessage(self, message):
    self.messages.append(message)

  def createConfigurationSpec(self, configurationTemplateName, configurationkws=None):
    return self.manifest.createConfigurationSpec(
        configurationTemplateName, configurationkws)

  # configurations created by subtasks are transient insofar as the are not part of the spec,
  # but they are persistent in that they recorded as part of the resource's state and status
  # XXX2 need a way to mark this as permanent
  # XXX3 have a way to update spec attributes to trigger config updates e.g. add dns entries via attributes on a dns
  # (for now just rely on away mark a subtask as permanent)
  def createSubTask(self, configSpec, persist=False):
    return TaskRequest(configSpec, persist)

  # adding new resources
  # fully qualified name indicates parent
  #  operational state indicates if exists or not
  #  updates metadata created or discovered
  #  new resources can trigger jobs
  def addResource(self, templateName, name, parent, attributes, spec, status):
    # XXX2 should indicate what kind of dependency
    # instantiate new resource and a job that will run it
    resource = self.manifest.createResource(templateName, name, metadata)
    # configurator can yield the returned job if it wants it to be run right away
    # otherwise it will be run later
    # XXX2 need to addJob if it was yielded
    self.addedResources.append(resource)
    return JobRequest(resource)

  # dependency = [dependent, required]
  # updates can be marked as dependencies (changes to dependencies changed) or required (error if changed)
  # configuration has cumulative set of changes made it to resources
  # updates update those changes
  # other configurations maybe modify those changes, triggering a configuration change
  # what about previous changes?
  # XXX2
  # setting dependencies and required replace old ones
  # dependencies can be declared separately and with queries
  def updateDependency(self, name, dependencyTemplateName, args=None):
    """
    Dynamically update the conditions this configuration depends on.
    """
    if dependencyTemplateName:
      dependency = self.manifest.createDependency(self.currentConfiguration.configurationSpec, dependencyTemplateName, args)
      self.currentConfiguration.dependencies.update(name, dependency)
    else:
      self.currentConfiguration.dependencies.pop(name, None)

  def findResource(self, name):
     return self.manifest.getRootResource().findResource(name)

class AttributeManager(object):
  def __init__(self):
    self.attributes = {}
    self.statuses = {}

  def setStatus(self, resource, newvalue):
    if resource.name not in self.statuses:
      self.statuses[resource.name] = [resource._computedStatus, newvalue]
    else:
      self.statuses[resource.name][1] =  newvalue

  def getAttributes(self, resource):
    if resource.name not in self.attributes:
      specd = mapValue(resource.spec.get('attributes', {}), resource)
      attributes = mapValue(resource._attributes, resource)
      specd.update(attributes)
      self.attributes[resource.name] = (resource, specd, serializeValue(specd))
      return specd
    else:
      return self.attributes[resource.name][1]

  def revertChanges(self):
    self.attributes = {}
    # for resource, old, new in self.statuses.values():
    #   resource._computedStatus = old

  def commitChanges(self):
    changes = {}
    for resource, attributes, original in self.attributes.values():
      # 1. convert to back json (refs)
      serialized = serializeValue(attributes)
      # 2. diff with resource._attributes
      diff = diffDicts(original, serialized)
      if not diff:
        continue
      # 3. save diff
      changes[resource.name] = diff
      # 4. update resource
      resource._attributes = serialized
    self.attributes = {}
    # self.statuses = {}
    return changes

class Task(TaskView, AttributeManager):
  """
  Configurator records the changes to the system's state via the Task interface

  Find resources
  record new resources
  modify / delete resources
  record / update / remove dependencies expressed as conditions
   (by updating and/or instantiating the ones defined in the spec)

  Configurator's only other interface to modifying the system is through createSubTask()
  """
  def __init__(self, job, spec, currentConfiguration, parentId=None):
    TaskView.__init__(self, job.runner.manifest, currentConfiguration)
    AttributeManager.__init__(self)
    self.changeId = job.runner.incrementChangeId()
    self.parentId = parentId or job.changeId
    spec.lastAttempt = self.changeId
    self.oldConfiguration = currentConfiguration
    if currentConfiguration:
      self.currentConfiguration = currentConfiguration
      # new configuration's status starts out as the previous one
      self.newConfiguration = Configuration(spec, currentConfiguration.resource, currentConfiguration.status)
    else:
      resource = self.findResource(spec.target)
      self.newConfiguration = Configuration(spec, resource, Status.notapplied)
      self.currentConfiguration = self.newConfiguration
    self.configurator = spec.create()
    self.errors = []
    self.startTime = job.startTime or datetime.datetime.now()
    self.dryRun = job.dryRun
    self.generator = None
    self.job = job
    self.changeList = []
    self.changeSet = None
    self.resourceChanges = ResourceChanges()

  def validateParameters(self):
    spec = self.newConfiguration.configurationSpec
    return not spec.validateParameters(
                  spec.resolveParameters(self.newConfiguration))

  def start(self):
    self.startRun()
    self.currentConfiguration.resource.root.attributeManager = self
    # set currentConfiguration (on the target resource too)
    config = self.newConfiguration
    self.currentConfiguration = config
    config.resource.setConfiguration(config)
    config.refreshParameters()

  def startRun(self):
    if self.dryRun:
      self.generator = self.configurator.dryRun(self)
    else:
      self.generator = self.configurator.run(self)
    assert isinstance(self.generator, types.GeneratorType)

  def send(self, change):
    result = None
    try:
      result = self.generator.send(change)
    finally:
      # we serialize configurations
      if result == Status.notapplied:
        self.revertChanges()
      else:
        self.commitChanges()
    return result

  def finished(self, result):
    if self.generator:
      self.generator.close()
      self.generator = None

    #XXX2 Check that configuration provided the metadata that it declared it would provide
    self.currentConfiguration.computedStatus = result
    resource = self.currentConfiguration.resource
    if result == Status.notapplied:
      # if the status is notapplied when finished set currentConfiguration back to the previous one
      if self.oldConfiguration:
        assert self.oldConfiguration.name == self.newConfiguration.name
        self.currentConfiguration = self.oldConfiguration
        resource.setConfiguration(self.oldConfiguration)
        resource.excludedConfigurations[self.newConfiguration.name] = self.newConfiguration
    elif result == Status.notpresent and self.currentConfiguration.intent == Action.revert:
      # set again, it might not have been in excludedConfigurations
      resource.setConfiguration(self.newConfiguration)

    if result != Status.notapplied and self.changeList:
      # merge changes together (will be saved with changeset)
      changes = self.changeList
      accum = changes.pop(0)
      while changes:
        accum = mergeDicts(accum, changes.pop(0))

      self.resourceChanges.update(accum, self.statuses, self.addedResources, resource)
      self.newConfiguration.resourceChanges.update(accum, self.statuses, self.addedResources, resource)

    return self.newConfiguration

  def commitChanges(self):
    # XXX2 attributes set by configurations should be per configuration
    # mark which ones are exposed as public resource attribuets and subject to merge conflicts
    statuses = self.statuses
    changes = AttributeManager.commitChanges(self)
    self.changeList.append(changes)
    return changes

  def __repr__(self):
    return "Task(%s:%s %s)" % (
      self.newConfiguration.resource.name,
      self.newConfiguration.name,
      getattr(self, 'reason', 'unknown')
    )

class JobOptions(object):
  """
  Options available to select which tasks are run, e.g. read-only

  does the config apply to the action?
  is it out of date?
  is it in a ok state?
  """
  defaults = dict(
    parentJob=None,
    startTime=None,
    out=None,

    resource=None,
    configuration=None,

    # default options:
    add=True, # run newly added configurations
    update=True, # run configurations that whose spec has changed but don't require a major version change
    repair="error", # or 'degraded' or "notapplied" or "none", run configurations that are not operational and/or degraded

    upgrade=False, # run configurations with major version changes or whose spec has changed
    all=False, # (re)run all configurations
    verify=False, # XXX2 discover first and set status if it differs from expected state
    readOnly=False, # only run configurations that won't alter the system
    dryRun=False, # XXX2
    requiredOnly=False,
    revertObsolete=False #revert
    )

  def __init__(self, **kw):
    options = self.defaults.copy()
    options.update(kw)
    self.__dict__.update(options)

class Job(OperationalInstance):
  def __init__(self, runner, rootResource, specs, jobOptions):
    super(Job, self).__init__(Status.ok)
    assert isinstance(jobOptions, JobOptions)
    self.__dict__.update(jobOptions.__dict__)
    self.jobOptions = jobOptions
    self.runner = runner
    self.wantedSpecs = specs
    self.rootResource = rootResource
    self.jobQueue = []
    self.unexpectedAbort = None
    self.changeId = runner.incrementChangeId()
    self.parentId = self.parentJob.changeId if self.parentJob else None
    self.workDone = collections.OrderedDict()

  def addChildJob(self, resource, specs=None):
    jobOptions = JobOptions(parentJob=self, repair="none")
    childJob = Job(self.runner, resource, specs or [], jobOptions)
    assert childJob.parentJob is self
    # print('adding', childJob, 'to', self)
    self.jobQueue.append(childJob)
    return childJob

  def removeFromParentQueue(self):
    if self.parentJob:
      # print('removing', self, 'from', self.parentJob)
      self.parentJob.jobQueue.remove(self)

  def includeTask(self, config, lastChange):
    """
spec (config):
  intent: discover instantiate revert
  config
  version

status (lastChange):
  state: ok degraded error notpresent
  Current runtime state compared to requirements for last applied spec:
    no longer needed, misconfigured / parameters changed, error/degraded, missing/should be applied
    (only discovered at runtime as state is updated but persisted for next run)
  action: discover instantiate revert

status compared to current spec is different: compare difference for each:
  config: same different missing orphan
  intent vs. action: (d, i) (i, d) (i, r) (r, i) (d, r) (r, d)
  version: newer older
    """
    assert config or lastChange
    if self.all and config:
      return 'all', config
    if config and not lastChange:
      if self.add:
        # XXX2 what if config.intent == A.revert? return None
        return 'add', config
      else:
        return None
    spec = lastChange.configurationSpec
    if lastChange and not config:
      if self.revertObsolete:
        return 'revertObsolete', spec.copy(intent=A.revert)
      if self.all:
        return 'all', spec
    elif spec != config:
      # the user changed the configuration (including parameters):
      if config.intent == A.revert and lastChange.status == S.notpresent:
        return None # nothing to revert
      if self.upgrade:
        return 'upgrade', config
      if lastChange.status == S.notpresent and spec.intent != config.intent and self.add:
        # this case is essentially a re-added config, so re-run it
        return 'add', config
      if self.update:
        # apply the new configuration unless it will trigger a major version change
        if config.intent != A.revert and spec.majorVersion != config.majorVersion:
          return 'update', config
    else:
      # XXX1 what about dependencies / required changed pretty much the same as hasParametersChanged()
      configChanged = lastChange.hasParametersChanged()
      if configChanged and (self.update or self.all):
        return 'configchanged', spec

      # there isn't a new config to run, see if the last applied config needs to be re-run
      # XXX we need to distinguish between a change that was never applied and one that failed to apply
      #if lastChange.status == S.neverapplied and self.add:
      #  return 'neverapplied', spec
    return self.checkForRepair(lastChange)

  def checkForRepair(self, lastChange):
    assert lastChange
    if self.repair=="none":
      return None
    status = lastChange.status
    if status == S.notapplied and lastChange.required:
      status = S.error # treat as error

    # repair should only apply to configurations that are active and in need of repair
    # XXX what about pending??
    if status not in [S.degraded, S.error, S.notapplied]:
      return None

    spec = lastChange.configurationSpec
    if status == S.notapplied:
      if self.repair == 'notapplied':
        return 'notapplied', spec
      else:
        return None
    if self.repair == "degraded":
      assert status > S.ok, status
      return 'degraded', spec # repair this
    elif status == S.degraded:
      assert self.repair == 'error', self.repair
      return None # skip repairing this
    else:
      assert self.repair == 'error', "repair: %s status: %s" % (self.repair, lastChange.status)
      return 'error', spec # repair this

  def getCurrentConfigurations(self):
    return self.rootResource.getAllConfigurationsDeep()

  def findConfigurations(self, resource):
    for config in self.wantedSpecs:
      if config.target == resource.name:
        yield config
      # XXX3 to support rule-based configurations:
      # if config.matches(resource):
      #   if config.isTemplate:
      #     yield config.copy(target=resource.name)
      #   else:
      #     yield config

  # predictability, clarity, static analysis
  # correctness: state changes are live
  # simplicity / understandable, easy to use and implement
  # state changes may place prior configurations in a obsolete, error/degraded, or outdated/misconfigured state
  def getCandidateTasks(self):
    """
    Find candidate tasks

    Given declared spec, current status, and job options, generate selector

    does the config apply to the action?
    is it out of date?
    is it in a ok state?
    has its configuration changed?
    has its dependencies changed?
    are the resources it modifies in need of repair?
    manual override (include / skip)

    # intent: discover instantiate revert
    # version
    # configuration
    """
    # list of resources yielded here may dynamically change if tasks are run during iteration
    # we do this so as to reflect the state of the system as accurately as possible when tasks are run
    # but this means added resources whose parent has already been iterated over would be skipped
    # and updates to a resource already iterated over may render it inconsistent with the last run
    for resource in self.rootResource.getSelfAndDescendents():
      existing = resource.configurations.copy()
      excluded = resource.excludedConfigurations.copy()
      for config in self.findConfigurations(resource):
        if self.runner.isConfigAlreadyHandled(config):
          # configuration may have premptively run while executing another task
          continue
        lastChange = existing.pop(config.name, None)
        if not lastChange:
          lastChange = excluded.pop(config.name, None)
        include = self.includeTask(config, lastChange)
        if include:
          reason, config = include
          if self.filterConfig(config):
            yield self.createTask(config, lastChange, reason=reason)

      if self.all or self.revertObsolete:
        for change in existing.values():
          # it's an orphaned config
          include = self.includeTask(None, change)
          if not include:
            continue
          reason, config = include
          if self.runner.isConfigAlreadyHandled(config):
            # configuration may have premptively run while executing another task
            continue
          if self.filterConfig(config):
            yield self.createTask(config, change, reason=reason)

  def filterConfig(self, config):
    if self.readOnly and config.intent != 'discover':
      return None
    if self.requiredOnly and not config.required:
      return None
    if self.resource and config.target != self.resource:
      return None
    if self.configuration and config.name != self.configuration:
      return None
    return config

  def createTask(self, configSpec, config, parentId=None, reason=None):
    task = Task(self, configSpec, config, parentId)
    task.reason = reason
    return task

  def runTask(self, task):
    """
    During each task run:
    * Notification of metadata changes that reflect changes made to resources
    * Notification of add or removing dependency on a resource or properties of a resource
    * Notification of creation or deletion of a resource
    * Requests a resource with requested metadata, if it doesn't exist, a task is run to make it so
    (e.g. add a dns entry, install a package).
    XXX2 need a way for configurator to declare that is the manager of a particular resource or type of resource or metadata so we know to handle that request
    """
    # XXX3 recursion or loop detection
    if not self.canRunTask(task):
      return Status.notapplied

    task.start()
    change = None
    while True:
      try:
        result = task.send(change)
      except Exception:
        GitErOpTaskError(task, "configurator.run failed")
        return task.finished(Status.error)
      if isinstance(result, TaskRequest):
        subtask = self.createTask(result.configSpec, None, task.changeId)
        self.runner.addWork(subtask)
        change = self.runTask(subtask) # returns a configuration
      elif isinstance(result, JobRequest):
        job = self.addChildJob(result.resource)
        change = job.run() #returns a resource
      elif isinstance(result, Status):
        return task.finished(result)
      else:
        GitErOpTaskError(task, 'unexpected result from configurator')
        return task.finished(Status.error)

  def run(self):
    self.removeFromParentQueue()
    for task in self.getCandidateTasks():
      self.runner.addWork(task)
      if not self.shouldRunTask(task):
        continue

      self.runTask(task)
      if not self.parentJob:
        # only check when running top level tasks
        self.computedStatus = self.checkStatusAfterRun()

      if self.shouldAbort(task):
        return self.rootResource

    # the only tasks and jobs left will be those added to parent resources already iterated over
    # and also not yielded to runTask
    if not self.parentJob:
      # default child job will only rerun configurations whose parameters have changed
      # (XXX3 but we only do this once, should we keep checking?)
      self.addChildJob(self.rootResource)
      while self.jobQueue:
        job = self.jobQueue[0]
        job.run()
        if self.shouldAbort(job):
          return self.rootResource

    return self.rootResource

  def shouldRunTask(self, task):
    """
    Checked at runtime right before each task is run

    * check "when" conditions to see if it should be run
    * check task if it should be run
    """
    try:
      priority = task.configurator.shouldRun(task)
    except Exception:
      #unexpected error don't run this
      GitErOpTaskError(task, "shouldRun failed")
      return False

    task.newConfiguration.priority = priority
    return priority > Priority.ignore

  def canRunTask(self, task):
    """
    Checked at runtime right before each task is run

    * validate parameters
    * check "required"/pre-conditions to see if it can be run
    * check task if it can be run
    """
    try:
      canRun = (task.validateParameters()
              and task.newConfiguration.configurationSpec.canRun(task.newConfiguration)
              and task.configurator.canRun(task))
    except Exception:
      GitErOpTaskError(task, "shouldRun failed")
      canRun = False

    if canRun:
      return True
    else:
      config = task.newConfiguration
      config.computedStatus = Status.notapplied
      if task.oldConfiguration:
        config.resource.excludedConfigurations[config.name] = config
      return False

  def shouldAbort(self, task):
    return False #XXX2

  def summary(self):
    return "XXX2"

  def checkStatusAfterRun(self):
    """
    After each task has run:
    * Check dependencies:
    ** check that runtime-(post-)conditions still hold for configurations that might have been affected by changes
    ** check for configurations whose parameters might have been affected by changes, mark them as "configuration changed"
    (simple implementation for both: check all configurations (requires saving previous inputs))
    ** XXX3 check for orphaned resources and mark them as orphaned
      (a resource is orphaned if it was added as a dependency and no longer has dependencies)
      (orphaned resources can be deleted by the configuration/configurator that created them or manages that type)
    """
    def yieldAllDependencies():
      for configuration in self.getCurrentConfigurations():
        for dependency in configuration.getOperationalDependencies():
          yield dependency

    return Operational.aggregateStatus(yieldAllDependencies())

  def getOperationalDependencies(self):
    # XXX this isn't right, root job might have too many and child job might not have enough
    # plus dynamic configurations probably shouldn't be included if yielded by a configurator
    for task in self.workDone.values():
      yield task.currentConfiguration

class Manifest(AttributeManager):
  def __init__(self, rootResource, specs, templates=None, lastChangeId=0):
    super(Manifest, self).__init__()
    self.rootResource = rootResource
    rootResource.attributeManager = self
    self.specs = specs
    self.templates = templates or {}
    self.lastChangeId=lastChangeId

  def getRootResource(self):
    return self.rootResource

  def getConfigurationSpecs(self):
    return self.specs

  def createConfigurationSpec(self, configurationTemplateName, configurationKws):
    configurationkws = self.templates.get(configurationTemplateName, {})
    configurationkws.update(configurationKws or {})
    return ConfigurationSpec(**configurationkws)

  def createResource(self, templateName=None, name=None, attributes=None, parent=None, configurationSpecs=None):
    assert name, "must specify a name"
    assert not self.rootResource.findResource(name), "name %s isn't unique" % name
    resource = Resource(name, attributes, parent or self.getRootResource())
    if configurationSpecs:
      for spec in configurationSpecs:
        resource.setConfiguration(Configuration(spec, resource))
    return resource

  def createDependency(self, configurationSpec, dependencyTemplateName, args=None):
    return None

  def saveJob(self, job):
    pass

class Runner(object):
  def __init__(self, manifest):
    self.manifest = manifest
    self.lastChangeId = manifest.lastChangeId
    self.currentJob = None

  def addWork(self, task):
    config = task.currentConfiguration
    key = (config.resource.name, config.name)
    self.currentJob.workDone[key] = task
    task.job.workDone[key] = task

  def isConfigAlreadyHandled(self, configSpec):
    return (configSpec.target, configSpec.name) in self.currentJob.workDone

  def createJob(self, joboptions):
    """
    Selects task to run based on job options and starting state of manifest
    """
    return Job(self, self.manifest.getRootResource(), self.manifest.getConfigurationSpecs(), joboptions)

  def incrementChangeId(self):
    self.lastChangeId +=1
    return self.lastChangeId

  def run(self, joboptions=None):
    """
    """
    if joboptions is None:
      joboptions = JobOptions()
    job = self.createJob(joboptions)
    self.currentJob = job
    try:
      job.run()
    except Exception:
      job.computedStatus = Status.error
      job.unexpectedAbort = GitErOpError("unexpected exception while running job", True)
    self.currentJob = None
    self.manifest.saveJob(job)
    return job
